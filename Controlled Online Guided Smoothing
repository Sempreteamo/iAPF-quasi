library(future)
library(mvtnorm)
library(MASS)
library(FKF)

##parameters
start = proc.time()
set.seed(1)
Num <- 100 #total number of particles
N <- vector()
N[1] <- Num
Time = 100 
L = 50 #lag
specific = Time-L+1#The specific time that we want to compare the distributions
A = 0.42
B = 1
C = 1
D = 1
d = 1
k <- 5
tau <- 0.5
X_true <- vector()
obs <- vector()
kappa = 0.5
dt <- ct <- 0
Tt <- as.matrix(A)
P0 <- Zt <- Ht <- Gt <- as.matrix(1)
a0 <- 0
index <- 1

Obs <- function(){
  X_true[1] <- rnorm(1)   
  for(t in 2:Time){  #observations
    X_true[t] <- rnorm(1) + A*X_true[t-1] 
  }
  return(rnorm(Time) + X_true)
}
obs <- Obs()

#if we want to repeat the experiment, then start from here
X <- matrix(NA, Time, Num)
X_ <- matrix(NA, Time, Num)
w <- matrix(NA, Time, Num)
Z = 0
Z_apf <- vector()

#the mean, variance of the smoothing distribution and normalizing constant
fkf.obj <- fkf(a0, P0, dt, ct, Tt, Zt, Ht, Gt, yt = t(obs))
fks.obj <- fks(fkf.obj)
fkf.obj_Z <- fkf(a0, P0, dt, ct, Tt, Zt, Ht, Gt, yt = t(obs))$logLik

Smoothing <- function(specific_time){
  fks_mean <- fks.obj$ahatt[,specific_time]
  fks_var <- fks.obj$Vt[,,specific_time]
  return(list(fks_mean, fks_var))
}

##Start our iAPF-quasi algorithm
#n <- L/2

source('iapf_only_controlled_new.R')

####the first layer of iAPF from t=1 to L to obtain psi####

iAPF1 <- function(time_step) {
#initialization for time t = 1...L to obtain psi1, w1, X1
  
  output <- Init(time_step) 
  X <- output[[1]] 
  w <- output[[2]]
  psi <- output[[3]]   
  
  #Iteration
  #obtain 
  if(L < Time){
    for(time_step in seq(2*L,Time,L)){
      
      #I didn't include any resampling in this step
      #Run iAPF with the initial distribution we defined 
      
      output <- init_APF(time_step, w, X)
      X_apf <- output[[1]]
      w_apf <- output[[2]]
      Z_apf <- output[[3]]
      
      output2 <- psi_APF(time_step, X_apf, Z_apf, w, X)
      
      #smoothing particles
      X <- output2[[1]]
      w <- output2[[2]]
      psi <- output2[[3]]
    }  
  }
  return(psi1 = psi)
}

layer1 <- function(start_time, end_time) {
  time_step <- start_time
  while (time_step <= end_time) {
    if (time_step %% L == 0) {
      cat("iAPF1 generated output at time step", time_step, "\n")
      psi1 <- iAPF1(time_step)
      Sys.sleep(1)
      # Use future to parallelize algorithm3 for processing
      future({
        final_output <- smoothing_APF(time_step, psi1, 1)
      })
    }
    #Sys.sleep(1)  # Simulate the passage of time
    time_step <- time_step + 1
  }
}

output1 <- layer1(L, Time)
####the second layer of iAPF from t=1 to L to obtain psi####

layer2 <- function(start_time, end_time) {
  time_step <- start_time
  while (time_step <= end_time) {
    if (time_step %% (L/2) == 0) {
      cat("Algorithm 2 generated output at time step", time_step, "\n")
      psi2 <- iAPF2()
      Sys.sleep(1)
      output <- paste("Output from Algorithm 2 at time", time_step)
      # Use future to parallelize algorithm3 for processing
      future({
        final_output <- smoothing_APF(psi2, 1)
      })
    }
    Sys.sleep(1)  # Simulate the passage of time
    time_step <- time_step + 1
  }
}


iAPF2 <- function() {
  #t = 1, . . . , L/2 to obtain X2, w2 and psi2
  output <- Init() 
  X <- output[[1]] 
  w <- output[[2]]
  psi <- output[[3]]   
    
    ####Algorithm####
  if(L < Time){
    #start from L/2 to 3L/2 to obtain psi2
    for(n in seq(3*L/2,Time,L)){
      
      #I didn't include any resampling in this step
      #Run iAPF with the initial distribution we defined 
      
      output <- init_APF(w, X)
      X_apf <- output[[1]]
      w_apf <- output[[2]]
      Z_apf <- output[[3]]
      
      output2 <- psi_APF(n, X_apf, Z_apf, w, X)
      
      #smoothing particles
      X <- output2[[1]]
      w <- output2[[2]]
      psi <- output2[[3]]
    }  
  }
  return(psi2 = psi)
}

# Create a cluster for parallel processing
cl <- makeCluster(detectCores())  # Use all available CPU cores

# Parallelize the execution of iAPF1 and iAPF2
psi1 <- clusterCall(cl, iAPF1)
psi2 <- clusterCall(cl, iAPF2)

# Stop the cluster
stopCluster(cl)

# Use the collected outputs as input for the main algorithm


